# Install django
pip install Django
 
# Install PostgreSQL driver
pip install psycopg2-binary

# Install celery
pip install celery>=3.1.18
pip install django-celery-beat

# Start the site
django-admin startproject <<mysite>>

# Set up the postgres database
> sudo apt install postgresql postgresql-contrib
> pip install dj-database-url postgres
> sudo su - postgres
> psql
> CREATE USER <username> PASSWORD '<password>';
> CREATE DATABASE <db_name> OWNER <username>;
> ALTER USER <username> CREATEDB;
- Change the database line in settings.py to:
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '<db_name>',
        'USER': '<username>',
        'PASSWORD': '<password>',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
'''

# Turn off debug in <mysite>/settings.py

# Start an app, "periodic"
python manage.py startapp periodic

# Change TIME_ZONE to "America/New_York" in <project>/settings.py

# Using steps from https://realpython.com/asynchronous-tasks-with-django-and-celery/, set up the celery.py
# file in <mysite> directory.

# Install redis as a broker
sudo apt-get install redis
pip install redis

# Collect static files:
python manage.py collectstatic

# Then add the following (may need an edit) to settings.py:
# CELERY STUFF
BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/New_York'

# Set up a Django superuser admin

python manage.py createsuperuser
# My user: benjamin
# My password: <the movie one>

#*#*#*#*#*# 
MUST BE SET DURING DEPLOY
*#*#*#*#*#*

settings.py -- ALLOWED_HOSTS


#### Adding a Celery Task ####
# From https://realpython.com/asynchronous-tasks-with-django-and-celery/, set up the celery.py
# Section: Periodic tasks

Add 'tasks.py' in the app (e.g. 'periodic' folder), with the 'periodic task' code. Also add the 'periodic' app
 to the project and make the views.py and urls.py as described in https://docs.djangoproject.com/en/2.2/intro/tutorial01/.
 -- Crontab only goes down to minutes...
#### NOTE: The task should be named 'task_...'

# Apply your migrations:
python manage.py migrate

# Start celery workers:
celery -A <project> worker -l info -n <unique_name>
# You can see all workers with
celery -A <project> status
# Run the celery beat with
celery -A <project> beat

# HOW IT **SHOULD** WORK:
celery -A <project> inspect scheduled 
# should list the scheduled tasks. But there are none. 
# Also:
celery -A picasa shell
celery.conf.beat_schedule

'''
I don't know why but the syntax used in the SO question is outdated, you must use
app.autodiscover_tasks(lambda: settings.INSTALLED_APPS) now: http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html
'''

# NEED TO ADD APP TO settings/INSTALLED_APPS.
# Also need to add the one line in <app>/apps.py

-- from django.apps import AppConfig

-- class <Appname>Config(Appconfig)
--     name = '<whatever>'

# GOT IT!
Key sites to figure it out: 
-- http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html (Documentation)
-- https://www.merixstudio.com/blog/django-celery-beat/ (Had a couple weird things)

# Key ideas: 

-- @task or @shared_task decorator in <app>/tasks.py
-- <app>/apps.py - a couple lines (see example)
-- <app>/__init__.py - default_app_config = '<app>.apps.<Appname>Config'
-- <project>/celery.py, set up according to http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html .. The lines pertaining to the "proj.settings" are important to get right, rather than mporting the settings from django.conf (this causes circular dependency). The tasks can be defined elsewhere...
-- <project>/settings.py -- set up with CELERY namespace items, largely according to https://www.merixstudio.com/blog/django-celery-beat/. 
---- also need to have the app in the INSTALLED_APPS list. 
-- <project>/__init__.py -- the lines described in http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html . 
-- Maybe <project>/urls.py set up, but that doesn't seem to be a requirement. 
-- Timing for the tasks goes in the <project>/settings.py file.
-- To run tasks: 
	-- Create a worker: celery -A picasa worker -l info
	-- ** AND **
	-- Create a celery beat: celery -A picasa beat -l INFO 

# MAKE APPS REUSABLE
https://docs.djangoproject.com/en/2.2/intro/reusable-apps/	

# Make sure your media URL and static URL are set to something Apache can serve. 
# This means that apache needs to serve both the 'static' dir and the 'media' dir, 
# and you should be able to access those from the web. 

# SERVING FILES
-Install mod-wsgi
-Set /etc/apache2/conf-available/mod-wsgi.conf to: 
    WSGIScriptAlias /test_wsgi /var/www/html/wsgi_test_script.py

    WSGIScriptAlias / /home/benjamin/git_repos/local_picasa/picasa
    WSGIPythonPath /home/benjamin/git_repos/local_picasa

    Alias "/tmp" /home/benjamin/git_repos/local_picasa/picasa/tmp

    <Directory /home/benjamin/git_repos/local_picasa/picasa>
    <Files wsgi.py>
       Require all granted
    </Files>
    </Directory>

- a2enconf mod-wsgi
- a2enmod xml2end

-Put an Alias in "/etc/apache2/sites-available/000-default.conf" to 
  the directory for media. Use "Require all granted" rather than order allow,deny
  and stuff.  

    Alias /media /home/benjamin/git_repos/local_picasa/media

    <Directory /home/benjamin/git_repos/local_picasa/media>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Require all granted
    </Directory>

- Allow the server firewall to allow ports 5000, 5001, and 44444 to accept traffic on UDP. Pattern is
sudo ufw allow 44444/udp
The exact ports may vary but are listed in the parameters.xml for the image face processing code. 

# Setting up the tagging program on another computer:

- Download the face tagging sub repository on the GPU computer
- Install dependencies using the requirements.txt in that folder
- Add to crontab: 
-- @reboot (<PATH_TO_GUNICORN>/gunicorn -b 0.0.0.0:5000 -w 1 --chdir <PATH_TO_THIS_GIT_REPO> server_client.server_image_handler:app ) &
- Add to /etc/rc.local:
-- runuser -l <YOUR_USER> -c "/usr/bin/python3 <PATH_TO_THIS_FILE>/server_ip_discover.py " &

# Set up the IP address for the Picasa host machine so that Docker can get the appropriate
# return host address for the face detection:
# Add to your /etc/profile on the django host:
export HOST_IP=`ip route | grep default | awk '{print $9}'`

