

# https://github.com/DoTheEvo/Traefik-v2-examples
# version: "3.3"
services:
  # Now running with cloudflared, public hostname is
  # picasa.exploretheworld.tech, with service at
  # http://picasa_api:8000
  picasa:
    build:
      context: .
      dockerfile: Dockerfile_picasa
      args:
        buildno: 1
    deploy:
      resources:
        limits:
          cpus: '1.5'
    image:
      picasa_img
    container_name: picasa_api
    command:
      bash /startup.sh
    env_file:
      - .env
    # environment:
      # Add the following line to your /etc/profile:
      # HOST_IP=`ip route | grep default | awk '{print $9}'`
      # - DOCKER_HOST_IP=${HOST_IP} 
    ports:
      - "${CLIENT_FACE_PORT}:${CLIENT_FACE_PORT}/udp"
      - 44480:8000
      #- "5001:5001/udp"
     # - 5000:5000
     # - 5001:5001
     # - 44444:44444
    volumes:
      - ${DJANGO_FILES_ROOT}:/code
      - ${PHOTO_ROOT}:/photos:ro
      - ${PHOTO_ROOT}:/photos_rw
      - ${TEST_PHOTOS_FILEPOPULATE}:/test_imgs_filepopulate
      - ${MEDIA_FILES_LOCATION}:/media
      - ${LOG_LOCATION}:/var/log/picasa
      - ${MODEL_LOCATION}:/models
    depends_on:
      - db_django
    networks:
      - traefik_proxy
    restart: always
#    labels:
#
#      - "traefik.enable=true"
#      - "traefik.http.routers.picasa.rule=Host(`${WEBAPP_DOMAIN}`)"
#      - "traefik.http.routers.picasa.tls.certresolver=leresolver"
#      - "traefik.http.routers.picasa.entrypoints=websecure"
#      - "traefik.http.services.picasa.loadbalancer.server.port=8000"
#      - "traefik.http.services.picasa.loadbalancer.healthcheck.hostname=${WEBAPP_DOMAIN}"
#      - "traefik.http.middlewares.picasa.redirectscheme.scheme=https"
#      - "traefik.http.middlewares.picasa.redirectscheme.permanent=true"

      # Need to start postgresql service

#  flower:
#    image: mher/flower
#    command: ["flower", "--broker=redis://task_redis:6379/0", "--port=8888"]  
#    container_name: flower
#    networks:
#      - traefik_proxy
#    environment:
#      - ub:50

#    labels:
#
#      - "traefik.enable=true"
#      - "traefik.http.routers.flower.rule=Host(`flower.exploretheworld.tech`)"
#      - "traefik.http.routers.flower.tls.certresolver=leresolver"
#      - "traefik.http.routers.flower.entrypoints=websecure"
#      - "traefik.http.services.flower.loadbalancer.server.port=8888"
#      - "traefik.http.middlewares.flower.redirectscheme.scheme=https"
#      - "traefik.http.middlewares.flower.redirectscheme.permanent=true"
#      - "traefik.http.routers.flower.middlewares=authflower"
#      - "traefik.http.middlewares.authflower.basicauth.users=benjamin:$$apr1$$ly25xhfg$$d2eLiOIOnM.IbsZ6Cfb760" # admin/movie based one

#    image: postgres_init
#FROM postgres:12.1-alpine
# WORKDIR /docker-entrypoint-initdb.d
# ADD psql_init.sh .
  db_django:
    build:
      context: .
      dockerfile: Dockerfile_postgres
    image: postgres_w_cron
    env_file:
      - .env
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
#      PGDATA: /database
    volumes:
      - ${DB_FILES_LOCATION}:/var/lib/postgresql/data
      # Initialization script - see Postgres Docker documentation.
      - ${DJANGO_FILES_ROOT}/dockerize/psql_init.sh:/docker-entrypoint-initdb.d/psql_init.sh
      # Add a file to the weekly crontab directory that backs up the database. 
      # Run by the run-parts command, which hates periods in filenames, hence why 
      # I don't make a .sh suffix in the container. 
#      - ${DJANGO_FILES_ROOT}/dockerize/postgres_bak.sh:/etc/periodic/weekly/postgres_bak_sh
#      - ${DJANGO_FILES_ROOT}/dockerize/postgres_bak.sh:/etc/periodic/daily/postgres_bak_sh
      - /mnt/fast_storage/appdata/django_picasa/backups:/backup
    labels:
      - "user=postgres"
    container_name: db_picasa  
    networks:
      - traefik_proxy

  task_redis:
    image: redis:5.0-alpine
    # env_file:
    #   - .env_picasa
    restart: always
    env_file:
      - .env
    networks:
      - traefik_proxy
    container_name: redis_picasa

  apache_fileserve:
    # image: httpd:2.4-alpine
    build:
      context: . 
      dockerfile: Dockerfile_apache
      args:
        buildno: 1
    image:
      httpd_image
    container_name: picasa_media_apache
    env_file:
      - .env
#    expose:
#      - '80'
    # environment:
    #   - MEDIA_FILES_LOCATION=${MEDIA_FILES_LOCATION}
    restart: always
    volumes:
      # - ${MEDIA_FILES_LOCATION}:/usr/local/apache2/htdocs/
      - ${MEDIA_FILES_LOCATION}:/var/www/media:ro
      - ${HOST_STATIC_LOCATION}:/var/www/static:ro
      - ${PHOTO_ROOT}:/var/www/full_res:ro
      - ${DJANGO_FILES_ROOT}/dockerize/apache_config/000-default.config:/etc/apache2/sites-enabled/000-default.conf
      - ${DJANGO_FILES_ROOT}/dockerize/apache_config/vhost.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf
      - ${DJANGO_FILES_ROOT}/dockerize/apache_config/apache_pwd.pwd:/usr/local/apache2/.htpasswd 
    networks:
      - traefik_proxy
#    labels:
#      - "traefik.backend=picasa_media"
#      - "traefik.frontend.rule=Host:${MEDIA_DOMAIN}"
#      - "traefik.enable=true"
#      - "traefik.port=80"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.http.routers.apache_fileserve.rule=Host(`${MEDIA_DOMAIN}`)"
#      - "traefik.http.routers.apache_fileserve.tls.certresolver=leresolver"
#      - "traefik.http.routers.apache_fileserve.entrypoints=websecure"
      #- "traefik.http.routers.traefik.middlewares=authtraefik"
      #- "traefik.http.middlewares.authtraefik.basicauth.users=admin:$apr1$ly25xhfg$d2eLiOIOnM.IbsZ6Cfb760" # admin/movie based one


networks:
  default: 
    driver: bridge
  traefik_proxy:
    external: true
  #traefik_default:
  #  external: true
#       name: traefik_default
