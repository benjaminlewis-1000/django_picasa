
version: "3.3"
services:
  picasa:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        buildno: 1
    image:
      picasa_img
    command:
      python /code/manage.py runserver
    command:
      celery -A picasa worker -l info
    command:
      celery -A picasa beat -l info
    expose:
      - "${CLIENT_FACE_PORT}"
      # - "8000"
    env_file:
      - .env
    ports:
      - "8080:8000"
    volumes:
      - ${DJANGO_FILES_ROOT}:/code
      - ${PHOTO_ROOT}:/photos:ro
      - ${TEST_PHOTOS}:/test_imgs
    depends_on:
      - db_django
    # environment:
      # - IN_DOCKER=True

      # Need to start postgresql service

  db_django:
    build:
      context: .
      dockerfile: Dockerfile_postgres
    image: postgres_init
    # expose: 
    #   - '5432'
    # ports:
    #   - '5432'
    # command:
    #   service postgresql start
    env_file:
      - .env
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
#      PGDATA: /database
    volumes:
      - ${DB_FILES_LOCATION}:/var/lib/postgresql/data
      # Initialization script - see Postgres Docker documentation.

    labels:
      - "user=postgres"
    container_name: db_picasa  
    # networks:
    #   - test_default

  task_redis:
    image: redis:5.0-alpine
    # env_file:
    #   - .env_picasa
    restart: always
    env_file:
      - .env

  apache_fileserve:
    # image: httpd:2.4-alpine
    image: httpd
    env_file:
      - .env
    expose:
      - '80'
    # environment:
    #   - MEDIA_FILES_LOCATION=${MEDIA_FILES_LOCATION}
    restart: always
#     ports:
#       - "80:80" 
    volumes:
      - ${MEDIA_FILES_LOCATION}:/usr/local/apache2/htdocs/
    networks:
      - traefik_default
    labels:
      - "traefik.backend=picasa_media"
      - "traefik.frontend.rule=Host:${MEDIA_DOMAIN}"
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.docker.network=traefik_proxy"

  apache:
    container_name: apache
    restart: always
    # image: httpd:2.4-alpine
    image: httpd
    # expose:
    #   - "80"
    labels:
      - "traefik.frontend.rule=Host:apache.${DOMAINNAME}"
      - "traefik.backend=apache"
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.docker.network=traefik_proxy"
    networks:
      - traefik_proxy
      # - traefik_proxy

#  whoamiapach:
#    image: emilevauge/whoami # A container that exposes an API to show its IP address
#    image: httpd
#    labels:
#      - "traefik.backend=whoamiapach"
     # - "traefik.frontend.rule=Host:whoami.docker.localhost"
#      - "traefik.frontend.rule=Host:apachewho.${DOMAINNAME}"
#      - "traefik.enable=true"
#      - "traefik.port=80"
##      - "traefik.protocol=http"
#      - "traefik.docker.network=traefik_proxy"
  # The traefik container will automatically create a network called <imagename>_default and publish it to bridge. I need to hook into that network if starting from an external docker-compose.yml file.
#    networks:
#      - traefik_default
#   ports:

  whoami:
#    image: emilevauge/whoami # A container that exposes an API to show its IP address
    image: httpd
    labels:
      - "traefik.backend=whoami"
     # - "traefik.frontend.rule=Host:whoami.docker.localhost"
      - "traefik.frontend.rule=Host:whoami2.${DOMAINNAME}"
      - "traefik.enable=true"
      - "traefik.port=80"
#      - "traefik.protocol=http"
      - "traefik.docker.network=traefik_proxy"
  # The traefik container will automatically create a network called <imagename>_default and publish it to bridge. I need to hook into that network if starting from an external docker-compose.yml file.
    networks:
      - traefik_default



networks:
  default: 
    driver: bridge
  traefik_proxy:
    external: true
  traefik_default:
    external: true
#       name: traefik_default
